class OpenStruct
  def initialize(table)
    @table = table
  end
end
 
module ActiveSupport  
  class OrderedOptions < Hash
  end
  
  class MessageVerifier
    def initialize(secret, digest='SHA1', serializer=Marshal)
      @secret = secret
      @digest = digest
      @serializer = serializer
    end
    
    def generate(value)
      data = encode(@serializer.dump(value))
      "#{data}--#{generate_digest(data)}"
    end
    
    def encode(data)
      ::Base64.strict_encode64(data)
    end
    
    def generate_digest(data)
      require 'openssl' unless defined?(OpenSSL)
      OpenSSL::HMAC.hexdigest(OpenSSL::Digest.const_get(@digest).new, @secret, data)
    end
  end
end

module ActionDispatch
  class Cookies
    class SignedCookieJar
      attr_reader :verifier
      
      def initialize(parent_jar, options = {}, verifier)
        @parent_jar = parent_jar
        @options = options
        @verifier = verifier
      end
    end
  end
end